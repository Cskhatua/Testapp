name: Playwright Tests

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  run-playwright:
    name: Run Playwright Tests
    runs-on: self-hosted

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '23.1.0' # Specify the Node.js version you want to use

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Install Playwright browsers
      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      # Step 5: Run Playwright tests
      - name: Run Playwright tests
        run: npx playwright test
      - name: Combine and Upload HTML Reports
        run: |
          mkdir -p combined-reports
          for dir in html-report-*; do
          if [ -d "$dir" ]; then
           cp -r "$dir" combined-reports/
          fi
          done
      - name: Upload Combined Artifact
        uses: actions/upload-artifact@v4
        with:
          name: html-reports
          path: combined-reports

      # Step 6: Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./gh-pages


#name: Playwright CI and Publish Report to GitHub Pages
#
#on:
#  push:
#    branches: [ main ] # Trigger on pushes to the main branch
#
#jobs:
#  playwright-and-publish:
#    runs-on: self-hosted # Ensure it runs on your self-hosted runner
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Set up Node.js
#        uses: actions/setup-node@v3
#        with:
#          node-version: '23.1.0' # Or your preferred Node.js version
#
#      - name: Install dependencies
#        run: npm install
#
#      - name: Install Playwright Browsers
#        run: npx playwright install --with-deps
#
#      - name: Run Playwright Tests and Generate Report
#        run: |
#          npx playwright test --reporter=html
#          mkdir -p ./path-to-pages-artifact
#          cp -r html-report-* ./path-to-pages-artifact
#
#      - name: Debug Artifact Directory
#        run: |
#          echo "Listing files in the workspace..."
#          ls -al
#          echo "Checking artifact directory..."
#          ls -al ./path-to-pages-artifact || echo "Directory not found"
#
#      - name: Upload Pages Artifact
#        uses: actions/upload-pages-artifact@v3
#        with:
#          path: ./path-to-pages-artifact
#          name: github-pages
#          retention-days: 30
#
#      - name: Find HTML Report Folder
#        id: find_report
#        run: |
#          REPORT_FOLDER=$(ls -d html-report-* | tail -n 1)
#          if [ -z "$REPORT_FOLDER" ]; then
#            echo "Error: No HTML report folder found."
#            exit 1
#          fi
#          echo "REPORT_FOLDER=$REPORT_FOLDER" >> "$GITHUB_OUTPUT"
#
#      - name: Configure Git for GitHub Pages Push
#        run: |
#          git config --global user.name "GitHub Actions Bot"
#          git config --global user.email "actions@github.com"
#
#      - name: Deploy to GitHub Pages
#        run: |
#          REPORT_PATH="${{ steps.find_report.outputs.REPORT_FOLDER }}"
#          GH_PAGES_BRANCH="gh-pages"
#
#          # Check out the gh-pages branch if it exists, or create an orphan branch
#          git checkout --orphan "$GH_PAGES_BRANCH" || git checkout "$GH_PAGES_BRANCH"
#          git rm -rf . # Clean the gh-pages branch
#
#          # Copy the report folder content to the root
#          cp -r "$REPORT_PATH"/* .
#
#          # Add, commit, and push the changes
#          git add .
#          COMMIT_MESSAGE="Update Playwright Report ($(date +'%Y-%m-%d %H:%M:%S %Z%z'))"
#          git commit -m "$COMMIT_MESSAGE"
#
#          # Force push to gh-pages to update the content
#          git push origin --force "$GH_PAGES_BRANCH"
#
#      - name: Enable GitHub Pages
#        uses: actions/configure-pages@v4
#        if: always()
#        with:
#          source: . # The root directory of your gh-pages branch
#
#      - name: Install GNU Tar (gtar)
#        if: runner.os == 'macOS'
#        run: |
#          brew install gnu-tar
#          echo "Adding gtar to PATH"
#          echo 'export PATH="/usr/local/opt/gnu-tar/libexec/gnubin:$PATH"' >> ~/.bash_profile
#          source ~/.bash_profile
#
#      - name: Upload Pages Artifact
#        uses: actions/upload-pages-artifact@v3
#        with:
#          path: ./path-to-pages-artifact
#
#      - name: Upload artifact
#        uses: actions/upload-pages-artifact@v3
#        if: always()
#        with:
#          path: . # The root directory of your gh-pages branch
#
#      - name: Deploy to GitHub Pages
#        uses: actions/deploy-pages@v4
#        if: always()